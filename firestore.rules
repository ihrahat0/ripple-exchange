rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      
      // Allow initial creation for new Google users
      allow write: if isAuthenticated() 
        && isOwner(userId) 
        && (
          !exists(/databases/$(database)/documents/users/$(userId))
          || get(/databases/$(database)/documents/users/$(userId)).data.authProvider == 'google'
        );

      // Allow access to user's positions subcollection
      match /positions/{positionId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Main positions collection rules
    match /positions/{positionId} {
      allow read: if isAuthenticated() && (
        !exists(/databases/$(database)/documents/positions/$(positionId))
        || resource.data.userId == request.auth.uid
      );
      
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.status == 'OPEN'
        && request.resource.data.openTime is timestamp;
      
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && (
          (request.resource.data.status == 'CLOSED' && resource.data.status == 'OPEN')
          || (request.resource.data.status == resource.data.status)
        );
      
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    // Update coins collection rules
    match /coins/{coinId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Add any additional collection rules here
  }
} 