rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Allow users to read and write their own data
    match /users/{userId} {
      // CRITICAL: Allow users to create their own document when they sign up
      // This is necessary because Firebase Auth creates the auth user before Firestore document
      allow create: if isAuthenticated() && isOwner(userId);
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Allow users to manage their wallet data
    match /walletAddresses/{userId} {
      // Allow users to create their wallet when they register
      allow create: if isAuthenticated() && isOwner(userId);
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Allow wallet backups to be created and read by the user
    match /walletBackups/{userId} {
      allow create: if isAuthenticated() && isOwner(userId);
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Allow security logs to be created
    match /securityLogs/{logId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // Allow users to manage their balances
    match /balances/{userId} {
      allow create, read, update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Allow users to read their own transactions
    match /transactions/{transactionId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow update, delete: if isAdmin();
    }

    // Main positions collection rules
    match /positions/{positionId} {
      allow read: if isAuthenticated() && (
        !exists(/databases/$(database)/documents/positions/$(positionId))
        || resource.data.userId == request.auth.uid
        || isAdmin()
      );
      
      allow create: if isAuthenticated() 
        && (request.resource.data.userId == request.auth.uid || isAdmin());
      
      allow update: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isAdmin());
      
      allow delete: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Update coins collection rules
    match /coins/{coinId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Public collections anyone can read
    match /{path=**}/tokens/{tokenId} {
      allow read: if true;
    }
    
    match /{path=**}/pairs/{pairId} {
      allow read: if true;
    }
    
    match /{path=**}/marketData/{dataId} {
      allow read: if true;
    }

    // Rules for other collections
    match /{collection}/{docId} {
      // Default rule - admins can read/write all other collections
      allow read, write: if isAdmin();
    }
  }
} 